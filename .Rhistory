source("complete.R")
source(complete.R)
source("complete.R")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("7bfecb3cf0fb404cd32e", "5b916020956ec5976a8bef536e98d1f87e788a7b")
myapp <- oauth_app("csdregiserapp","7bfecb3cf0fb404cd32e", "5b916020956ec5976a8bef536e98d1f87e788a7b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
test <- content(req)
test1 <- jsonlite::fromJSON(toJSON(test))
install.packages("jsonlite")
test1 <- jsonlite::fromJSON(toJSON(test))
available.packages
available.packages()
head(test)
test1 <- jsonlite::fromJSON(toJSON(test))
library(jsonlite)
library("jsonlite")
install.packages("rjson")
test1 <- jsonlite::fromJSON(toJSON(test))
load(jsonlite)
available.packages()
load(jsonlite)
install.packages("jsonlite", repos="http://cran.r-project.org")
load(jsonlite)
load(jsonlite)
load(jsonlite)
library(jsonlite)
library("jsonlite")
library(jsonlite)
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
q()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time |  BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
set.seed(1)
rpois(5, 2)
?set.seed
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
q()
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(temp)
summary(temp)
plot(temp)
1.0*0.1+2.0*0.2+3.0*0.3+4.0*0.4
sessionInfo()
setwd("D:/Tutorials/DataScientistCoursera/ReproducibleSearch/courseproject1/RepData_PeerAssessment1")
data <- read.csv("activity.csv", sep = ",", header=TRUE, na.rm = TRUE)
data <- read.csv("activity.csv", sep = ",", header=TRUE)
class(data)
class(data$date)
data <- read.csv("activity.csv", sep = ",", header=TRUE, colClasses=c("integer", "Date", "factor"))
class(data$date)
updatedData <- na.omit(data)
stepsPerDay <- aggregate(steps ~ date, updatedData, sum)
stepsPerDay
summary(stepsPerDay)
head(stepsPerDay)
mean(stepsPerDay$steps)
median(stepsPerDay$steps)
ggplot(noNA, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
library(ggplot2)
ggplot(noNA, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(updatedData, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
data$month <- as.numeric(format(data$date, "%m"))
ggplot(updatedData, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
head(updatedData)
data$month <- as.numeric(format(data$date, "%m"))
noNA <- na.omit(data)
rownames(noNA) <- 1:nrow(noNA)
head(noNA)
dim(noNA)
library(ggplot2)
ggplot(noNA, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(updatedData, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
updatedData$month <- as.numeric(format(updatedData$date, "%m"))
head(updatedData)
ggplot(updatedData, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(updatedData, aes(date, steps)) + geom_bar(stat = "identity", colour = "green", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(updatedData, aes(date, steps)) + geom_bar(stat = "identity", colour = "green", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(updatedData, aes(date, steps)) + geom_bar(stat = "identity", colour = "green", fill = "green", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
avgStepsForInterval <- aggregate(steps ~ interval, updatedData, mean)
head(avgStepsForInterval)
nrow(avgStepsForInterval)
dim(avgStepsForInterval)
class(updatedData$interval)
avgSteps <- aggregate(noNA$steps, list(interval = as.numeric(as.character(noNA$interval))), FUN = "mean")
nrow(avgSteps)
head(avgSteps)
stepsByIntervalData <- aggregate(updatedData$steps, list(interval = as.numeric(as.character(updatedData$interval))), FUN = "mean")
names(stepsByIntervalData)[2] <- "StepsByInterval"
stepsByIntervalData[stepsByIntervalData$stepsByInterval == max(stepsByIntervalData$stepsByInterval), ]
stepsByIntervalData
head(stepsByIntervalData)
ggplot(newUpdatedData, aes(date, steps)) + geom_bar(stat = "identity",
colour = "green", fill = "green", width = 0.8) +
facet_grid(. ~ month, scales = "free") +
labs(title = "Histogram of Total Number of Steps Taken Each Day (no missing data)", x = "Date", y = "Total number of steps")
newUpdatedData <- data
for (i in 1:nrow(newUpdatedData)) {
if (is.na(newUpdatedData$steps[i])) {
newUpdatedData$steps[i] <- stepsByIntervalData[which(newUpdatedData$interval[i] == stepsByIntervalData$interval), ]$StepsByInterval
}
}
sum(is.na(newUpdatedData))
ggplot(newUpdatedData, aes(date, steps)) + geom_bar(stat = "identity",
colour = "green", fill = "green", width = 0.8) +
facet_grid(. ~ month, scales = "free") +
labs(title = "Histogram of Total Number of Steps Taken Each Day (no missing data)", x = "Date", y = "Total number of steps")
ggplot(newUpdatedData, aes(date, steps)) + geom_bar(stat = "identity",
colour = "steelblue",
fill = "steelblue",
width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day (no missing data)", x = "Date", y = "Total number of steps")
head(newUpdatedData)
nrow(updatedData)
